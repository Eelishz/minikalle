use shakmaty::{Board, Chess, Position};

const SCALE: i16 = 100;

// TODO: encode weights in a better way.

const W0: [i16; 3072] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, -13, 0, 3, -8, -3, 0, 3, -6, -12, 0, 3, -3, -2, 0, 3, -7, 3, 0, 3, -7, -13, 0, 5, -8, 7, 0, 4, -3, -8, 0, 4, -5, -14, 0, 2, -5, -10, 0, 6, -6, -6, 0, 4, -6, -8, 0, 6, -7, 0, 0, 4, -7, -12, 0, 5, -4, 2, 0, 6, -5, -7, 0, 5, -6, -14, 0, 4, -8, -8, 0, 4, -4, 0, 0, 3, -6, 6, 0, 2, -9, 6, 0, 3, -4, -2, 0, 4, -3, -5, 0, 5, -3, -7, 0, 5, -5, -3, 0, 6, -3, -6, 0, 5, -4, -7, 0, 8, -5, -2, 0, 5, -6, 5, 0, 4, -7, 4, 0, 3, -1, -2, 0, 8, -3, -5, 0, 4, -4, -1, 0, 9, -8, -17, 0, 6, -13, 2, 0, 5, -9, -4, 0, 7, -8, 4, 0, 4, -10, 13, 0, 4, -7, 0, 0, 6, 5, 7, 0, 13, -5, 0, 0, 18, -10, 1, 0, 11, -8, -2, 0, 11, -7, 0, 0, 16, -7, 0, 0, 13, -3, 2, 0, 11, -6, -9, 0, 12, -4, -5, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8, 1, 0, 6, -6, 0, 0, 6, -7, 0, 0, 7, -7, -5, 0, 12, -15, 0, 0, 3, -9, 9, 0, 7, -8, -1, 0, 7, 2, -4, 0, 13, 0, -2, 0, 5, 7, -10, 0, 5, -13, 4, 0, 3, -9, 7, 0, 9, -11, 1, 0, 9, -4, -4, 0, 11, -9, -10, 0, 4, -7, 0, 0, 8, -3, -13, 0, 11, -12, 0, 0, 10, -10, 6, 0, 8, -12, 0, 0, 8, -6, 3, 0, 12, -13, 5, 0, 9, -9, 11, 0, 8, -4, -11, 0, 13, -4, -3, 0, 9, -7, 0, 0, 13, -9, -5, 0, 13, -12, 0, 0, 10, -16, 2, 0, 10, -9, -1, 0, 11, -11, 0, 0, 12, -9, 1, 0, 12, -3, 2, 0, 14, -9, 3, 0, 11, -11, 8, 0, 11, -12, 2, 0, 12, -12, 0, 0, 12, -12, 9, 0, 13, -12, 6, 0, 10, -5, 10, 0, 12, -4, 0, 0, 10, -5, 1, 0, 14, -19, -1, 0, 8, -5, 12, 0, 17, -13, 5, 0, 9, -22, 0, 0, 10, -17, 10, 0, 7, -11, 5, 0, 11, -7, 0, 0, 13, -5, 1, 0, 11, -9, 8, 0, 15, -17, 0, 0, 7, -15, 4, 0, 13, 0, 10, 0, 16, -5, 0, 0, 7, -6, 5, 0, 8, -4, 4, 0, 10, -4, 0, 0, 14, -5, 0, 0, 7, -3, -2, 0, 9, -3, 0, 0, 14, -10, 0, 0, 0, -2, -1, 0, 8, -1, 2, 0, 16, -10, 4, 0, 12, -9, 20, 0, 7, -6, 8, 0, 11, -13, 7, 0, 8, -12, -2, 0, 11, -11, 3, 0, 7, -15, 11, 0, 4, -27, 6, 0, 7, -7, 18, 0, 8, -9, 13, 0, 11, -9, 16, 0, 11, -10, 0, 0, 12, -12, 3, 0, 11, -15, 3, 0, 11, -16, 22, 0, 9, 1, 22, 0, 15, -3, -3, 0, 13, -11, 3, 0, 11, -12, 0, 0, 15, -15, 8, 0, 10, -10, 11, 0, 12, -12, 5, 0, 10, -9, 17, 0, 11, -2, 1, 0, 13, -1, 4, 0, 11, -12, 1, 0, 11, -10, 6, 0, 12, -7, 8, 0, 13, -12, 6, 0, 11, -8, 11, 0, 10, -8, -5, 0, 13, -6, 14, 0, 12, -6, 5, 0, 16, -6, 2, 0, 14, -10, -2, 0, 15, -12, 13, 0, 11, -9, 0, 0, 16, -14, 16, 0, 10, -10, 4, 0, 13, -10, 5, 0, 10, -8, 3, 0, 11, -9, 6, 0, 12, -20, 0, 0, 10, -7, 10, 0, 10, -11, -2, 0, 14, -17, 2, 0, 7, -11, 0, 0, 11, -9, 22, 0, 13, -4, 2, 0, 15, -9, 6, 0, 9, -1, 1, 0, 17, -15, 0, 0, 7, -11, -9, 0, 9, -8, 3, 0, 10, -17, 11, 0, 8, 2, 14, 0, 14, -1, 3, 0, 16, -8, 0, 0, 15, -4, 0, 0, 7, -7, 0, 0, 13, -4, 0, 0, 13, -7, 1, 0, 7, -10, 0, 0, 13, -4, 1, 0, 8, -12, 9, 0, 15, -11, 9, 0, 17, -14, 9, 0, 17, -12, 9, 0, 19, -13, 6, 0, 19, -14, 4, 0, 17, -16, 1, 0, 20, -9, 9, 0, 17, -16, 0, 0, 16, -13, -3, 0, 16, -18, 0, 0, 17, -14, -4, 0, 17, -13, 2, 0, 18, -16, -5, 0, 20, -22, -1, 0, 13, -8, 5, 0, 13, -13, -2, 0, 13, -7, 5, 0, 20, -7, 3, 0, 19, -16, -3, 0, 16, -14, 0, 0, 17, -9, -2, 0, 18, -13, 9, 0, 19, -10, 11, 0, 20, -19, -5, 0, 17, -10, 2, 0, 19, -10, 0, 0, 17, -15, 0, 0, 17, -8, 0, 0, 20, -11, 5, 0, 20, -11, 3, 0, 21, -4, 8, 0, 22, -6, 0, 0, 20, -7, 0, 0, 21, -7, 3, 0, 23, -15, 0, 0, 17, -10, 9, 0, 20, -9, 2, 0, 22, -6, 1, 0, 21, -3, 2, 0, 23, -10, 0, 0, 20, -12, 0, 0, 22, -9, -2, 0, 21, -10, 4, 0, 20, -10, 11, 0, 24, -14, 5, 0, 16, -11, 0, 0, 19, -12, 4, 0, 19, -7, 6, 0, 23, -13, 0, 0, 19, -9, 2, 0, 24, -12, 0, 0, 22, -12, 6, 0, 23, -13, 4, 0, 25, -13, 1, 0, 20, -8, 2, 0, 26, -13, 2, 0, 24, -9, -3, 0, 20, -20, 0, 0, 16, -23, -4, 0, 13, -20, -6, 0, 15, -20, -6, 0, 14, -9, -3, 0, 23, -10, 0, 0, 23, -10, 5, 0, 29, -15, -2, 0, 29, -20, -3, 0, 28, -26, 16, 0, 24, -24, 15, 0, 24, -21, 4, 0, 29, -21, 6, 0, 19, -15, 0, 0, 22, -14, 4, 0, 32, -17, 4, 0, 32, -20, 13, 0, 28, -22, 23, 0, 26, -24, 15, 0, 28, -23, 7, 0, 24, -26, 4, 0, 29, -24, 6, 0, 23, -18, 12, 0, 28, -22, 20, 0, 29, -22, 0, 0, 32, -23, 5, 0, 28, -22, -2, 0, 29, -25, 5, 0, 29, -24, 0, 0, 32, -23, 1, 0, 29, -13, 11, 0, 30, -19, 5, 0, 30, -18, 6, 0, 30, -20, 0, 0, 33, -28, 0, 0, 29, -19, 1, 0, 29, -23, 10, 0, 31, -20, 12, 0, 31, -25, 6, 0, 28, -14, 4, 0, 37, -17, 8, 0, 32, -21, 13, 0, 31, -21, 9, 0, 31, -23, 4, 0, 31, -22, 8, 0, 31, -20, 14, 0, 29, -16, 10, 0, 32, -12, 6, 0, 36, -25, 11, 0, 31, -19, 5, 0, 33, -26, 10, 0, 32, -36, 12, 0, 33, -23, 12, 0, 34, -21, 23, 0, 33, -12, 19, 0, 34, -23, 12, 0, 31, -23, 15, 0, 32, -18, -1, 0, 31, -19, 9, 0, 30, -26, 22, 0, 36, -28, 4, 0, 35, -26, 23, 0, 31, -15, 13, 0, 31, -23, 7, 0, 30, -25, 3, 0, 29, -35, -19, 0, 19, -23, 1, 0, 34, -23, 8, 0, 32, -21, 7, 0, 33, -18, 16, 0, 31, -1, 11, 0, -4, -3, 20, 0, -2, 3, 20, 0, 0, 3, -13, 0, -4, 4, 12, 0, -1, 5, -11, 0, 0, 4, 18, 0, 0, 7, 21, 0, 1, 4, 3, 0, 0, -5, -4, 0, 0, -4, -7, 0, -2, 1, -7, 0, 1, 0, -4, 0, 0, 0, -6, 0, 0, 1, 9, 0, 0, 5, 17, 0, 0, 1, -1, 0, -2, 0, 5, 0, 0, 1, -4, 0, 2, 4, -6, 0, 1, 0, -12, 0, -1, -1, -4, 0, 0, 1, -5, 0, -1, -1, 0, 0, -4, 0, 0, 0, 0, -1, -1, 0, 0, 0, -2, 0, 0, -1, 0, 0, 3, -1, 1, 0, 0, -2, 0, 0, 0, 0, -1, 0, 0, 0, -7, 0, -1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 1, -1, -1, 0, 1, 0, 0, 0, 3, 0, -1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 1, -5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, -3, 0, 0, 2, 1, 0, 0, 0, 1, 0, 0, -2, 0, 1, 0, 3, -3, 1, 0, 3, 0, 0, 0, 0, -2, 0, 0, -1, -3, 0, 0, 4, -3, 0, 0, 2, 1, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 3, 1, 0, -3, 0, 0, 0, -4, 0, 0, 0, 1, -1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, -1, 0, -11, 9, 5, 0, -8, 14, -1, 0, -10, 3, 0, 0, -10, 3, 5, 0, -14, 8, 0, 0, -11, 7, 3, 0, -11, 2, -1, 0, -13, 7, 3, 0, -6, 7, -5, 0, -3, 7, 1, 0, -8, 3, 3, 0, -8, 8, 2, 0, -5, 7, 1, 0, -8, 4, -11, 0, -8, -1, -11, 0, -6, 4, 15, 0, -5, 7, 0, 0, -3, 7, 6, 0, -4, 3, 4, 0, -4, 0, -8, 0, -6, 6, -1, 0, -4, 4, -1, 0, -4, 3, 0, 0, -6, 5, 10, 0, -3, 5, 4, 0, -3, 6, 0, 0, -3, 4, -2, 0, -5, 0, 1, 0, -5, 3, 0, 0, -6, 5, 0, 0, -4, 5, 3, 0, -2, 8, 14, 0, -2, 3, 11, 0, -6, 4, 8, 0, -5, 6, 4, 0, -5, 6, -1, 0, -5, 5, 7, 0, -5, 5, -3, 0, -5, 8, 6, 0, -1, 7, 15, 0, -2, 5, 0, 0, -5, 6, 14, 0, -4, 5, 1, 0, -4, 2, 0, 0, -5, 5, 4, 0, -5, 5, -1, 0, -5, 9, 4, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, -5, 6, 0, 0, -5, 7, -1, 0, -9, 11, -2, 0, -9, 8, -1, 0, -13, 4, 3, 0, -10, 0, 0, 0, -1, 13, 0, 0, -6, -4, 0, 0, -12, 2, 0, 0, -15, 12, -13, 0, -12, 6, 0, 0, -11, 6, -1, 0, -14, 9, -8, 0, -12, 3, -3, 0, -15, 7, -1, 0, -10, 5, 0, 0, -10, 9, -1, 0, -14, 6, 3, 0, -15, 8, -7, 0, -14, 2, -15, 0, -12, 2, -2, 0, -21, 3, -6, 0, -16, 0, 0, 0, -12, 6, 0, 0, -10, 8, 2, 0, -10, 10, -3, 0, -14, 7, 0, 0, -15, 10, -3, 0, -13, 11, -1, 0, -12, 11, 1, 0, -11, 7, -10, 0, -15, 8, 4, 0, -11, 4, 6, 0, -12, 9, -1, 0, -12, 7, 11, 0, -13, 6, 0, 0, -15, 10, -5, 0, -12, 2, 2, 0, -13, 10, 6, 0, -8, 13, 11, 0, -7, 5, 1, 0, -10, 7, 3, 0, -14, 6, 7, 0, -14, 3, 5, 0, -14, 8, 3, 0, -11, 2, -7, 0, -15, 5, 3, 0, -7, 3, 3, 0, -6, 10, 5, 0, -10, 4, -1, 0, -11, 8, 4, 0, -12, 8, 6, 0, -12, 8, -5, 0, -7, 10, -1, 0, -7, 6, 11, 0, -14, 3, 1, 0, -10, 1, 5, 0, -10, 6, 0, 0, -9, 1, 8, 0, -8, 2, 2, 0, -13, 7, 0, 0, -6, 6, 13, 0, -11, 1, 1, 0, 0, 10, -6, 0, -6, 11, 1, 0, -14, 8, -1, 0, -11, 7, 0, 0, -9, 8, -3, 0, -10, 5, 0, 0, -7, 8, 0, 0, -7, 17, -3, 0, -8, 8, -2, 0, -13, 9, -2, 0, -13, 12, -13, 0, -6, 5, 0, 0, -14, 3, 3, 0, -12, 10, -2, 0, -12, 7, 0, 0, -10, 7, 0, 0, -11, 7, -9, 0, -13, 6, 1, 0, -14, 7, 0, 0, -16, 9, -10, 0, -14, 7, -8, 0, -14, 2, 6, 0, -14, 0, -8, 0, -16, 10, -11, 0, -16, 1, -8, 0, -14, 13, -2, 0, -9, 6, -3, 0, -14, 14, -4, 0, -12, 6, -13, 0, -14, 7, -4, 0, -14, 5, -11, 0, -12, 4, -7, 0, -11, 15, 1, 0, -6, 13, 0, 0, -12, 8, -5, 0, -12, 9, 0, 0, -14, 11, 0, 0, -14, 6, -7, 0, -13, 7, -3, 0, -12, -1, -18, 0, -11, 9, -6, 0, -9, 14, -4, 0, -12, 8, -4, 0, -15, 7, -5, 0, -14, 11, 2, 0, -13, 5, -5, 0, -14, 6, -18, 0, -13, -2, 0, 0, -13, 5, -3, 0, -15, 4, -7, 0, -14, -3, -1, 0, -16, 9, 2, 0, -12, 5, -1, 0, -13, 3, -1, 0, -17, 5, -9, 0, -15, 15, -2, 0, -8, 6, -1, 0, -10, 0, 0, 0, -15, 3, -2, 0, -11, 7, 7, 0, -10, -4, 3, 0, -15, 4, 3, 0, -11, 5, 0, 0, -12, 4, -2, 0, -14, 13, 0, 0, -22, 12, 0, 0, -22, 5, 4, 0, -23, 3, 2, 0, -25, 4, 4, 0, -26, 4, 3, 0, -26, 12, 1, 0, -21, 14, -3, 0, -21, 9, -9, 0, -24, 16, -6, 0, -19, 15, -4, 0, -23, 12, -8, 0, -22, 10, 0, 0, -22, 12, 0, 0, -23, 12, 0, 0, -17, 16, -10, 0, -21, 14, 2, 0, -22, 9, 1, 0, -25, 12, 0, 0, -23, 13, -7, 0, -22, 9, -3, 0, -24, 9, 0, 0, -23, 2, 3, 0, -24, 24, -1, 0, -16, 17, -5, 0, -20, 15, -2, 0, -17, 16, -3, 0, -18, 9, 0, 0, -22, 9, 4, 0, -19, 10, 3, 0, -19, 8, -5, 0, -21, 16, -1, 0, -21, 15, 0, 0, -17, 8, 4, 0, -23, 12, -8, 0, -19, 11, -1, 0, -18, 6, 2, 0, -21, 10, 0, 0, -18, 12, 1, 0, -18, 6, 5, 0, -19, 10, 14, 0, -17, 10, 0, 0, -18, 13, 6, 0, -16, 10, 0, 0, -18, 8, 0, 0, -18, 11, 3, 0, -18, 11, -8, 0, -20, 9, 0, 0, -22, 4, 4, 0, -18, 11, 6, 0, -16, 15, 6, 0, -20, 13, 0, 0, -17, 15, 12, 0, -19, 16, 1, 0, -17, 5, -4, 0, -18, 12, 0, 0, -15, 12, 6, 0, -18, 11, 6, 0, -18, 13, 3, 0, -19, 9, 0, 0, -19, 9, 0, 0, -19, 9, 7, 0, -20, 10, -2, 0, -20, 9, 9, 0, -19, 15, 1, 0, -32, 16, 1, 0, -33, 16, 0, 0, -33, 6, 16, 0, -41, 16, 3, 0, -38, 13, 0, 0, -33, 19, -1, 0, -36, 21, -4, 0, -35, 9, 1, 0, -31, 19, 0, 0, -30, 19, 2, 0, -31, 7, 9, 0, -38, 16, 0, 0, -36, 21, -6, 0, -35, 22, 0, 0, -39, 18, -15, 0, -35, 11, -1, 0, -31, 11, 8, 0, -39, 14, 2, 0, -32, 17, 0, 0, -30, 14, -1, 0, -36, 16, 4, 0, -39, 22, -8, 0, -36, 21, 0, 0, -35, 19, 0, 0, -33, 16, 2, 0, -32, 16, -3, 0, -35, 19, 3, 0, -34, 18, 5, 0, -37, 23, -1, 0, -36, 21, 4, 0, -34, 18, -9, 0, -34, 20, 3, 0, -32, 16, 2, 0, -33, 17, 7, 0, -33, 15, 16, 0, -39, 14, 1, 0, -35, 16, 8, 0, -33, 16, -4, 0, -32, 15, 1, 0, -36, 17, 1, 0, -30, 14, -3, 0, -31, 17, 6, 0, -33, 13, 9, 0, -33, 14, 17, 0, -36, 15, 4, 0, -33, 15, 6, 0, -34, 9, -4, 0, -32, 13, 4, 0, -28, 10, 4, 0, -34, 11, 3, 0, -34, 14, 7, 0, -33, 10, 2, 0, -33, 18, 0, 0, -35, 7, -9, 0, -37, 6, -3, 0, -33, 21, 10, 0, -29, 15, 8, 0, -27, 6, 7, 0, -33, 12, 5, 0, -35, 13, -1, 0, -33, 14, 0, 0, -29, 1, -6, 0, -29, 10, 0, 0, -26, 0, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, -4, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, -3, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, -2, 4, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, -2, 0, 0, 0, 0, -1, 1, 0, 0, -1, 1, 0, 1, 1, 1, 0, -1, 0, 1, 0, 0, 3, 2, 0, -1, 3, -1, 0, -3, 3, 0, 0, -4, 5, 1, 0, -3, -5, 0, 0, -1, -2, 0, 0, 3, 1, 0, 0, -1, 3, 0, 0, -4, 0, 0, 0, 2, 2, 4, 0, 0, 2, 0, 0, -2, 1, 0, 0, -1, -1, 0, 0, 0, 0, -1, 0, 1, 1, 0, 0, 0, 1, 0, 0, -2, 0, 4, 0, -1, 1, 4, 0, 0, 1, 2, 0, 0, -2, 3, 0, 0, 0, 4, 0, 2, -2, -1, 0, 3, 0, 0, 0, 2, 1, 6, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 8, 0, 1, -1, 4, 0, 0, 0, 9, 0, 1, 0, 0, 0, 0, -4, -14, 0, -1, -2, -6, 0, 0, 8, 11, 0, 3, 3, -1, 0, 3, 3, -3, 0, 1, -1, -8, 0, 0, -2, -3, 0, 0, -11, 0, 0, 0, -7, -16, 0, 0, 0, -14, 0, 2, 0, 4, 0, 5, 0, -15, 0, 2, 0, -2, 0, 5, 0, -15, 0, 1, -3, -16, 0, 1,];
const W1: [i16; 16] = [-5, 4, 0, 0, 0, -3, 0, 0, 0, 0, 0, 0, 3, -12, 0, 0,];
const W2: [i16; 4] = [1133, -1399, 79, 3,];

const B0: [i16; 4] = [22, -29, 0, 24,];
const B1: [i16; 4] = [1, 5, 17, 0,];
const B2: [i16; 1] = [14,];

#[inline]
fn dot(x: &[i16], y: &[i16]) -> i16 {
    assert!(!x.is_empty());
    assert_eq!(x.len(), y.len());

    let mut sum = 0;

    for i in 0..x.len() {
        sum += (x[i] * y[i]) / SCALE;
    }

    sum
}

#[inline]
fn relu(x: i16) -> i16 {
    x.max(0)
}

#[inline]
fn feed_forward(input: &[i16; 768]) -> i16 {
    // Layer 0
    let h0_0 = relu(dot(input, &W0[0..768]) + B0[0]);
    let h0_1 = relu(dot(input, &W0[768..1536]) + B0[1]);
    let h0_2 = relu(dot(input, &W0[1536..2304]) + B0[2]);
    let h0_3 = relu(dot(input, &W0[2304..3072]) + B0[3]);

    // Layer 1
    let h1_0 = relu(dot(&[h0_0, h0_1, h0_2, h0_3], &W1[0..4]) + B1[0]);
    let h1_1 = relu(dot(&[h0_0, h0_1, h0_2, h0_3], &W1[4..8]) + B1[1]);
    let h1_2 = relu(dot(&[h0_0, h0_1, h0_2, h0_3], &W1[8..12]) + B1[2]);
    let h1_3 = relu(dot(&[h0_0, h0_1, h0_2, h0_3], &W1[12..16]) + B1[3]);

    // Layer 2
    let output = dot(&[h1_0, h1_1, h1_2, h1_3], &W2) + B2[0];

    output
}

#[inline]
fn serialize(board: &Board) -> [i16; 768] {
    let mut result = [0; 768];

    let white = board.white();
    let black = board.black();

    let p = board.pawns();
    let n = board.knights();
    let b = board.bishops();
    let r = board.rooks();
    let q = board.queens();
    let k = board.kings();

    for color in [white, black] {
        for piece in [p, n, b, r, q, k] {
            let bb = color.intersect(piece);

            for sq in bb {
                let index = sq as usize;
                result[index] = SCALE;
            }
        }
    }

    return result;
}

pub fn predict(position: &Chess) -> i16 {
    let input = serialize(position.board());
    feed_forward(&input)
}
